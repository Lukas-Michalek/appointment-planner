{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","props","contactList","onChange","event","target","value","contact","selected","map","index","AppointmentForm","contacts","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","person","name","onSubmit","type","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","tile","tileValues","key","Object","values","className","tileValue","TileList","tileList","datas","data","AppointmentsPage","addAppointment","appointments","useState","e","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","pattern","ContactsPage","duplicate","setDuplicate","addContact","useEffect","undefined","find","App","setContacts","setAppointmets","ROUTES","to","activeClassName","exact","path","newContact","prevContacts","newAppointment","prevAppointments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc341658.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = (props) => {\r\n  const { contactList, onChange } = props;\r\n\r\n  // After User selects name from drop down menu, this value is then passed into onChange() method which is exectured in AppointmnetForm.js, where the value chosen is then set as contact name, because AppointmnetForm.js is statefull component\r\n  \r\n  const handlePickedContact = (event) => {\r\n    onChange(event.target.value);\r\n    \r\n  };\r\n\r\n  let contact;\r\n\r\n  return (\r\n    <div>\r\n\r\n      <select onChange={handlePickedContact} value={contact}>\r\n        \r\n        <option selected=\"selected\" value=\"\">\r\n          Please Select Contact\r\n        </option>\r\n\r\n        {contactList.map((contact, index) => {\r\n          return (\r\n            <option \r\n                \r\n                value={contact} \r\n                key={index}\r\n            >\r\n              {contact}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from '../contactPicker/ContactPicker'\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  \r\n\r\n\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const handleTitleChange = (event) => {\r\n    setTitle(event.target.value);\r\n  }\r\n\r\n  const handleDateChange = (event) => {\r\n    setDate(event.target.value);\r\n  }\r\n\r\n  const handleTimeChange = (event) => {\r\n    setTime(event.target.value);\r\n  }\r\n\r\n  const contactList = contacts.map((person) => {\r\n    return person.name\r\n  })\r\n\r\n  \r\n  \r\n  const handlePickedContact = (onChange) => {\r\n    \r\n    setContact(onChange);\r\n    \r\n  }\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      {/* <p>{contactList}</p> */}\r\n    \r\n      <form onSubmit={handleSubmit}>\r\n\r\n      \r\n        <input \r\n            value={title}\r\n            onChange={handleTitleChange}\r\n            name='Title'\r\n            type='text'\r\n            placeholder=\"Appointment title...\" \r\n        />\r\n\r\n        <input \r\n            value={date}\r\n            onChange={handleDateChange}\r\n            name='Date'\r\n            type='date'\r\n            min={getTodayString()}\r\n            \r\n        />\r\n\r\n        <input \r\n            value={time}\r\n            onChange={handleTimeChange}\r\n            name='Time'\r\n            type='time'\r\n            \r\n        />\r\n\r\n        <ContactPicker \r\n            contactList = {contactList}\r\n            onChange={handlePickedContact}\r\n      \r\n        />\r\n\r\n        <button type=\"submit\">Submit</button>\r\n\r\n      </form>\r\n    </div>\r\n    \r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = (props) => {\r\n\r\n  const { tile, key } = props;\r\n\r\n   // tile => { name: \"luke\", phone: 13459, email=\"abc@asd\"}\r\n \r\n\r\n//   const tileValues = Object.values(tile);\r\n\r\n   // tile values: ['luke', 13459, 'abc@asd']\r\n\r\n  \r\n   const tileValues = Object.values(tile)\r\n\r\n  \r\n  return (\r\n    <div className=\"tile-container\">\r\n            \r\n      {\r\n        tileValues.map((tileValue, index) => {\r\n          if(index === 0){\r\n            return <p className='tile-title'>{tileValue}</p>\r\n          }\r\n          else{\r\n            return <p className='tile'>{tileValue}</p>\r\n          }\r\n        })\r\n      }    \r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = (tileList) => {\r\n\r\n  \r\n  const datas = tileList.tileList;  // Note that the props will be returning in the form such as {\"tileList\":[{\"name\":\"Luke\",\"email\":\"email\",\"phone\":\"123\"}]} or {\"tileList\":[{\"title\":\"App\",\"contact\":\"\",\"date\":\"2023-01-13\",\"time\":\"11:22\"}]}.\r\n\r\n  // In order for me to work with an arrya of object I first need to extract the that array where I get : [{\"name\":\"Luke\",\"email\":\"email\",\"phone\":\"123\"}] OR [{\"title\":\"App\",\"contact\":\"\",\"date\":\"2023-01-13\",\"time\":\"11:22\"}] => Arrays I can work with\r\n\r\n  \r\n\r\n  return (    \r\n    <div>\r\n\r\n\r\n     \r\n     {/* Going through the list of contacts/appointments and rendering each as <Tile /> component */}\r\n     \r\n     {datas.map((data, index) => {\r\n\r\n          return  <Tile \r\n                      tile={data}\r\n                      key={index}                      \r\n                  />    \r\n     })}\r\n    \r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AppointmentForm } from '../../components/appointmentForm/AppointmentForm';\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n\r\n  const { addAppointment, appointments, contacts} = props;\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [contact, setContact ] = useState('');\r\n  const [date, setDate ] = useState('');\r\n  const [time, setTime ] = useState('');\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n   \r\n    /*\r\n    Add contact info and clear data  \r\n    */\r\n\r\n    addAppointment(title, contact, date, time);\r\n\r\n    setTitle('');\r\n    setContact('');\r\n    setDate('');\r\n    setTime('');\r\n   \r\n  };\r\n\r\n  \r\n  return (\r\n    <div>\r\n\r\n\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        < AppointmentForm\r\n              title={title}\r\n              setTitle={setTitle}\r\n              contact={contact}\r\n              setContact={setContact}\r\n              date={date}\r\n              setDate={setDate}\r\n              time={time}\r\n              setTime={setTime}\r\n              handleSubmit={handleSubmit}\r\n              contacts={contacts}\r\n        \r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList\r\n          tileList={appointments}   // same as with cotacts but it looks like this: {\"tileList\":[{\"title\":\"App\",\"contact\":\"\",\"date\":\"2023-01-13\",\"time\":\"11:22\"}]}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n\r\n  const handleNameChange = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value)\r\n  }\r\n\r\n  const handlePhoneChange = (event) => {\r\n    setPhone(event.target.value)\r\n  }\r\n  \r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n\r\n      <input\r\n        value={name}\r\n        onChange={handleNameChange}\r\n        name='Name'\r\n        type='text'\r\n        placeholder=\"Your name...\" \r\n      />\r\n      \r\n\r\n      <input\r\n        value={email}\r\n        onChange={handleEmailChange}\r\n        name='Email Address'\r\n        type='text'\r\n        placeholder=\"Your email...\" \r\n      />\r\n      \r\n\r\n      <input\r\n        value={phone}\r\n        onChange={handlePhoneChange}\r\n        name='Phone Number'\r\n        type='number'\r\n        placeholder=\"Your phone number...\"\r\n        pattern=\"[1-9][0-9]{2}-[1-9][0-9]{2}-[0-9]{4}\"\r\n      />    \r\n\r\n      <button type=\"submit\" >Submit</button> \r\n     \r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [ duplicate, setDuplicate ] = useState(false);\r\n\r\n  // TODO => *** ALWAYS EXTRACT PROPS AND METHODS PASSED AS PROPS FIRST !!! ***\r\n\r\n  // When it comes to REACT functions I can do this by using props as parameter in function component and destructuring props like this. Props are being sent from app and are name={name} and addContact={addContact}\r\n\r\n  const { contacts, addContact } = props;\r\n\r\n\r\n  /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if(!duplicate){\r\n\r\n    addContact(name, email, phone);\r\n\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setPhone(\"\");\r\n  \r\n  }\r\n    \r\n  };\r\n\r\n  \r\n  // Checking if the name is already in the contacts array and thus flagging it as duplicate\r\n\r\n  useEffect(() => {\r\n    const nameIsDuplicate = () => {\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (nameIsDuplicate()) {\r\n      setDuplicate(true);\r\n    } else {\r\n      setDuplicate(false);\r\n    }\r\n  }, [name, contacts, duplicate]);  \r\n  \r\n  // Note that dependancy array of useEffect an be more items. In this case for example, Execute useEffect(re-render) every time when any of these will change\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n\r\n        <h2>{ duplicate ? 'Name is already in Contacts. Please choose another name.' : ''}</h2>\r\n\r\n        \r\n\r\n        <ContactForm\r\n          handleSubmit={handleSubmit}\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList\r\n          tileList={contacts} // list of contacts will be passed as props to tileList, which mean that object tileList wil be created with a list of objects that are contact information such as: {\"tileList\":[{\"name\":\"Luke\",\"email\":\"email\",\"phone\":\"123\"}]}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\nimport { useState } from \"react\";\r\n\r\nconst App = () => {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n\r\n  const [contacts, setContacts] = useState([]);\r\n  const [appointments, setAppointmets] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  const addContact = (name, email, phone) => {\r\n    \r\n    let newContact = {\r\n      name: name,\r\n      email: email,\r\n      phone: phone,\r\n    };\r\n\r\n    // Adding new Contact into Contacs array\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, newContact];\r\n    });\r\n  };\r\n\r\n  // Creating new Appoitnment from data given by user (title, contact, date)\r\n  const addAppointment = (title, contact, date, time) => {\r\n    const newAppointment = {\r\n      title: title,\r\n      contact: contact,\r\n      date: date,\r\n      time: time,\r\n    };\r\n\r\n    // Adding new appointment into Appointments array\r\n    setAppointmets((prevAppointments) => {\r\n      return [...prevAppointments, newAppointment];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          \r\n          <Route path={ROUTES.CONTACTS}>\r\n            {/* Add props to ContactsPage */}\r\n            <ContactsPage \r\n                  addContact={addContact} \r\n                  contacts={contacts} />\r\n          </Route>\r\n\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n\r\n            <AppointmentsPage\r\n              addAppointment={addAppointment}\r\n              appointments={appointments}\r\n              contacts={contacts}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}